    <div class="container">
      <div class="titlebox col-md">
        <h1>Project: Prefabricated Home Manufacturers</h1>
      </div>
    </div>

    <div class="container">
      <div class="section-heading col-md">
        Broad Description
      </div>
      <div class="intro-text col-md">
        ‘Prefab’ will be a directory-style page of web links, listing manufacturers of prefabricated homes. Visitors won’t be able to add their own links, but a single site administrator will. The site admin will gain access through a login page and then add links using a form. The app will consist of a single page featuring a nav bar, a photo, a number of headings (with a few links beneath each) and a footer:
      </div>
      <div class="titlebox col-md"> <!-- Using titlebox to centre the wireframe image -->
        <img src="<%= image_url('prefab-wireframe.png') %>" width="600" height="450"/>
      </div>
      <div class="intro-text col-md">
        Your finished site might look something like this: <a target="_blank" rel="noopener noreferrer" href="https://prefab-after-bootcamp.herokuapp.com">https://prefab-after-bootcamp.herokuapp.com</a>
      </div>
      <div class="intro-text col-md">
        Once the administrator has logged in, the page to add a new link could look like <a target="_blank" rel="noopener noreferrer" href="<%= image_url('prefab-form-screen.png') %>">this.</a>
      </div>
      <br />
    </div> 

    <div class="container">
      <div class="section-heading col-md">
        Thinking like a web developer
      </div>
      <ul>
        <div class="bullet-point col-md">
          <li>This web app will display four or five headings, which will each sit above four or five web-links. So the app’s database will need two tables; one to contain the headings and one for the web-links.</li>
        </div>
        <div class="bullet-point col-md">
          <li>Two tables will require two models; a heading model and a link model (This doesn’t include the user model that a user authentication library/package would create).</li>
        </div>
        <div class="bullet-point col-md">
          <li>If your web stack will allow any controller to request data from the heading model, then a specific headings controller may not be required.</li>
        </div>
        <div class="bullet-point col-md">
          <li>However, as links will certainly be added from within the site, a links controller (with CRUD functionality) will be needed.</li>
        </div>
        <div class="bullet-point col-md">
          <li>To begin with, the app will only require one view: the link listing on the index page. But this will have to be expanded when user authentication and ‘create a new link’ functionality is added.</li>
        </div>        
      </ul>
    </div>

    <div class="container">
      <div class="section-heading col-md">
        Helpful hints for building this app (without giving too much away)
      </div>
      <ul>
        <div class="bullet-point col-md">
          <li>The home page of this app will display some headings with a few links beneath each one. You could write code that pulls each of these items from the database individually, but that would involve a lot of repetition, and coders don’t like that. It would be much better to create a loop that pulls out both the headings AND their associated links with each pass.</li>
        </div>
        <div class="bullet-point col-md">
          <li>How does someone do that? You’ll need to ensure that a heading and its links share a single identifier which connects the two.</li>
        </div>
        <div class="bullet-point col-md">
          <li>Each entry in the headings table will contain the text for that heading, the text for its subtitle and an ID, which is automatically added.</li>
        </div>
        <div class="bullet-point col-md">
          <li>Each entry in the links table will contain the text description to be displayed for that link, the URL that the user will be taken to when they click the description and an ID which, again, is automatically added.</li>
        </div>
        <div class="bullet-point col-md">
          <li>Now, if each link in the table is also given a ‘heading_id’ field to hold the ID of the heading under which it should appear, then when your code loops through each of the headings (and their IDs), it will be able to recognise the links that go with that heading, thanks to a matching ‘heading_id’.</li>
        </div>
        <div class="bullet-point col-md">
          <li>We know that the headings database table will contain a fixed number of items (The site admin will be adding links, but not extra headings). This means that it only needs to be populated with data once, during the building of the site, and this can be done manually using the command line.</li>
        </div>
        <div class="bullet-point col-md">
          <li>However, to add links to the database, the app will require a ‘New Link’ form page. The app will need to know which of the headings your new link should appear under, so this page will have to fetch all available headings and allow the user to choose one. Installing a form-creation library can help with this.</li>
        </div>
        <div class="bullet-point col-md">
          <li>The appearance of your app will be improved by adding a navigation bar to the top of the screen, a footer to the bottom, and neatly formatting the text with margins and fonts. Installing a CSS framework can help with this.</li>
        </div>
        <div class="bullet-point col-md">
          <li>A text file containing details of prefabricated home manufacturers in the United States and the United Kingdom can be downloaded from <%= link_to 'here', '/Prefab-mfr-urls.txt', :target => "_blank" %>.</li>
        </div>
      </ul>
    </div>

    <div class="container">
      <div class="section-heading col-md">
        More detailed help (with Ruby on Rails code snippets)
      </div>
      <ul>
        <div class="bullet-point col-md">
          <li>Once the heading and link models have been generated, you can associate them in the heading model:
            <pre>
              <code class="language-ruby">
                has_many :links</code>
            </pre>
          ...and in the link model:
            <pre>
              <code class="language-ruby">
                belongs_to :heading</code>
            </pre>
          </li>
        </div>
        <div class="bullet-point col-md">
          <li>Homepage requests can be directed to an ‘index’ action in the links controller...
            <pre>
              <code class="language-ruby">
                root ‘links#index’</code>
            </pre>
          </li>
        </div>
        <div class="bullet-point col-md">
          <li>Even though the ‘index’ action is in the links controller, it can request data from the heading model and put them into instance variables...
            <pre>
              <code class="language-ruby">
                def index 
                  @headings = Heading.all 
                  @links = Link.all 
                end</code>
            </pre>
          </li>
        </div>
        <div class="bullet-point col-md">
          <li>The code in the homepage’s view file (index.html.erb) which not only loops through the headings, but also finds the links that are attached to each heading and then renders them both, could look something like this:
            <div class="titlebox col-md"> <!-- Using titlebox to centre the image -->
              <img src="<%= image_url('prefab-loop-code.png') %>" width="776" height="336"/>
            </div>
          Variable.find(param) gives a single result, whereas Variable.where(param) gives a <em>number</em> of results.
          </li>
        </div>
        <div class="bullet-point col-md">
          <li>Installing the Bootstrap ruby gem makes it easier to nicely format the text and create a nav bar at the top of the page and a footer at the bottom.</li>
        </div>
        <div class="bullet-point col-md">
          <li>After assigning more actions to the links controller in routes.rb (resources :links), a ‘new’ action and a ‘create’ action can be added to the controller. With the ‘simple_form’ ruby gem installed, a ‘new’ view (new.html.erb) to match the ‘new’ action can be created:
            <div class="titlebox col-md"> <!-- Using titlebox to centre the image -->
              <img src="<%= image_url('prefab-form-code.png') %>" width="713" height="231"/>
            </div>
          This ‘new link’ page could be accessed from a suitable button on the nav bar.</li>
        </div>
        <div class="bullet-point col-md">
          <li>User authentication can be added to the app by going through the steps to install the Devise ruby gem and then putting ‘Sign Up’, ‘Sign In’ and ‘Sign Out’ buttons on the nav bar.</li>
        </div>
        <div class="bullet-point col-md">
          <li>To limit the ‘new’ and ‘create’ actions only to authenticated users, a before-filter should be added to the beginning of the links controller:
            <pre>
              <code class="language-ruby">
              before_action :authenticate_user!, only: [:new, :create]</code>
            </pre>
          </li>
        </div>
        <div class="bullet-point col-md">
          <li>As things stand, anyone can create a user account by signing him/herself up with a username and password. But this app is going to display the links that have been added by just one user – a site admin. So you will need to create that one account, and then change the app to prevent anymore sign-ups.</li>
        </div>
        <div class="bullet-point col-md">
          <li>To begin with, the ‘New Link’, ‘Sign Out’ and ‘Sign In’ buttons on the nav bar can be enclosed in code which only displays them at the appropriate times:
            <div class="titlebox col-md"> <!-- Using titlebox to centre the image -->
              <img src="<%= image_url('prefab-signedin-code.png') %>" width="661" height="231"/>
            </div>
          You can also go ahead and remove the ‘Sign Up’ button from the nav bar.</li>
        </div>
        <div class="bullet-point col-md">
          <li>Although the ‘sign up’ link has been removed, somebody might try to access it using the address bar (/sign_up). To stop this from happening, delete the word ‘:registerable’ from the User model and then restart your server. All ‘user_registration’ routes will now disappear from ‘rake routes’. To prevent a 404 error, requests to these routes can be re-directed to the homepage:
            <pre>
              <code class="language-ruby">
              match '*path' => redirect('/'), via: :get</code>
            </pre>
          </li>
        </div>
      </ul>
    </div>

    <div class="container">
      <div class="section-heading col-md">
        “I’m not really interested in prefabricated homes. What else could my bookmarks point to?”
      </div>
      <ul>
        <div class="bullet-point col-md">
          <li>Interesting museums</li>
          <li>Entrepreneurship blogs</li>
          <li>80’s pop groups</li>
          <li>Electric car companies</li>
          <li>Spanish soccer teams</li>
        </div>     
      </ul>
    </div>